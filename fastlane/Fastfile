fastlane_require 'yaml'
fastlane_require 'mustache'
fastlane_require 'mail'
fastlane_require 'excon'

# Do not automatically generate README.md file.
skip_docs

before_all do

end


after_all do |lane|

end


error do |lane, exception|
  notification(title: ENV['WDG_PROJECT_NAME'], message: '操作失败')
end


################################################################
#     Usage: fastlane release version:0.0.1 env:yourname       #
################################################################

lane :release do |options|
  version_string = options[:version]
  env_file = options[:env]
  raise 'The version is missing. Use `fastlane release version:{env_file}`.' if env_file.nil? || env_file.empty?
  # 1. Preprocess
  sh("fastlane preprocess version:#{version_string} --env #{env_file}")
  # 2. Increase Version
  sh("fastlane version version:#{version_string} --env #{env_file}")
  # 3. Build and Archive
  sh("fastlane build version:#{version_string} --env #{env_file}")
  # 4. CDN and CocoaPods
  sh("fastlane upload version:#{version_string} --env #{env_file}")
  # 5. Notification
  sh("fastlane mail version:#{version_string} --env #{env_file}")
  # 6. Update Gitlab
  sh("fastlane gitlab version:#{version_string} --env #{env_file}")
  # 7. Postprocess
  sh("fastlane postprocess version:#{version_string} --env #{env_file}")
end


lane :preprocess do |options|
  fastlane_version '2.10.0'
  default_platform :ios
  version_string = options[:version]

  # Check if env params exists.
  raise 'The version is missing. Use `fastlane release version:{version_number}`.' if version_string.nil? || version_string.empty?
  raise 'The Project name is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['WDG_PROJECT_NAME'].nil? || ENV['WDG_PROJECT_NAME'].empty?
  raise 'The GitLab private key is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_PRIVATE_KEY'].nil? || ENV['GITLAB_PRIVATE_KEY'].empty?
  raise 'The GitLab user id is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_USER_ID'].nil? || ENV['GITLAB_USER_ID'].empty?
  raise 'The GitLab source project id is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_SOURCE_PROJECT_ID'].nil? || ENV['GITLAB_SOURCE_PROJECT_ID'].empty?
  raise 'The GitLab target project id is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_TARGET_PROJECT_ID'].nil? || ENV['GITLAB_TARGET_PROJECT_ID'].empty?
  raise 'The GitLab target project path with namespace is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_TARGET_PROJECT_PATH_WITH_NAMESPACE'].nil? || ENV['GITLAB_TARGET_PROJECT_PATH_WITH_NAMESPACE'].empty?
  raise 'The Email username is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['EMAIL_USERNAME'].nil? || ENV['EMAIL_USERNAME'].empty?
  raise 'The Email password is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['EMAIL_PASSWORD'].nil? || ENV['EMAIL_PASSWORD'].empty?
  raise 'The Email addresses to notify are missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['EMAIL_NOTIFICATION_ADDRESS'].nil? || ENV['EMAIL_NOTIFICATION_ADDRESS'].empty?
  raise 'The Official Website appID is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_APP_ID'].nil? || ENV['OFFICIAL_WEBSITE_APP_ID'].empty?
  raise 'The Official Website Email is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_EMAIL'].nil? || ENV['OFFICIAL_WEBSITE_EMAIL'].empty?
  raise 'The Official Website Password is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_PASSWORD'].nil? || ENV['OFFICIAL_WEBSITE_PASSWORD'].empty?
  raise 'The Official Website Project Name is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_PROJECT_NAME'].nil? || ENV['OFFICIAL_WEBSITE_PROJECT_NAME'].empty?

  # Check file and repo reachability.
  raise 'The CHANGELOG is missing.' if not File.exist?("../CHANGELOG.yml")
  raise 'The build shell script is missing.' if not File.exist?("../Deploy/build#{ENV['WDG_PROJECT_NAME']}.sh")
  raise 'The public podspec template is missing.' if not File.exist?("../Deploy/#{ENV['WDG_PROJECT_NAME']}.podspec.mustache")
  if ENV['RELEASE_ACTION_LOCAL_REPO_PUSH_ENABLE'] == 'true' then
    raise 'The local podspec template is missing.' if not File.exist?("../#{ENV['WDG_PROJECT_NAME']}.podspec.mustache")
  end

  # 1. Cocoapods (pod install)
  cocoapods

  # 2. Ensure git brance master
  ensure_git_branch(branch: 'master')

  # 3. Ensute git status clean
  ensure_git_status_clean

  # 4. Get current changelog
  changelog = wdg_get_current_changelog(yaml_path: ENV['CHANGELOG_PATH'])
  raise 'Public changelog must has at least one record'.red if changelog['public'].empty?
  puts changelog

end


lane :version do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']

  # 1. increment version number
  increment_version_number(version_number: version_string)

  # 2. Generate version header
  if ENV['RELEASE_ACTION_GENERATE_VERSION_HEADER_ENABLE'] == 'true'
    wdg_forward_version_header(project_name: release_project_name, version_string: version_string)
  end

end


lane :build do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']
  
  # 1. Run test
  if ENV['RELEASE_ACTION_TESTING_ENABLE'] == 'true'
    scan(scheme: release_project_name, devices: ['iPhone 5', 'iPhone 7'])
  end
  
  # 2. Build and archive
  Dir.chdir '../Deploy' do
    sh("./build#{release_project_name}.sh #{version_string}")
    Actions.sh("mkdir -p Archive/#{version_string}/")
    Actions.sh("cp Build/#{release_project_name}-#{version_string}.zip Archive/#{version_string}/")
    Actions.sh("cp #{release_project_name}.podspec Archive/#{version_string}/")
  end
  
  # 3. Update podspec
  update_local = ENV['RELEASE_ACTION_LOCAL_REPO_PUSH_ENABLE'] == 'true' ? true : false
  wdg_update_podspec(project_name: release_project_name, version_string: version_string, update_local: update_local)
end


lane :upload do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']
  
  # 1. Pod lib lint
  Dir.chdir '../Deploy' do
    Actions.sh("rm -rf #{release_project_name}.framework")
    Actions.sh("unzip ./Build/#{release_project_name}-#{version_string}.zip")
    sh("pod lib lint #{release_project_name}.podspec --allow-warnings")
  end
  
  # 2. Upload to CDN (url is optional)
  upload_sdk_to_cdn(
    version:version_string, 
    file_path:"Deploy/Build/#{release_project_name}-#{version_string}.zip", 
    url:"http://upload.ops.wilddog.cn/ios/"
  )
  
  # 3. pod trunk push
  def work(release_project_name)
    Dir.chdir '../Deploy' do
      sh("pod trunk push #{release_project_name}.podspec --allow-warnings --verbose")
    end
  end
  def retry_work(release_project_name, retries=0, delay=30, max_retry_count=10)
    puts "Waiting for #{ delay } seconds."
    sleep delay
    puts "Try #{ retries } time(s)."
    work(release_project_name)
  rescue => ex
    puts ex
    if retries < max_retry_count
      retry_work(release_project_name, retries + 1)
    else
      raise ex
    end
  end
  retry_work(release_project_name)
end

lane :mail do |options|

  version_string = options[:version]

  # 1. Send email
  if ENV['RELEASE_ACTION_NOTIFICATION_EMAIL_ENABLE'] == 'true'
    wdg_send_mail(version: version_string)
  end

end


lane :gitlab do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']
  changelog_string = mc_get_changelog_string(yaml_path: ENV['CHANGELOG_PATH'])

  # 0. Forward changelog
  wdg_forward_changelog(version_string: version_string, changelog_path: ENV['CHANGELOG_PATH'])

  # 1. Git commit (Release candidate)
  git_commit(path: '.', message: "Fastlane: #{version_string} Release Candidate.")
  
  # 2. Push to myfork master
  push_to_git_remote(local_branch: 'master', remote_branch: 'master', remote: 'myfork')
  
  # 3. Create merge request
  source_project_id = ENV['GITLAB_SOURCE_PROJECT_ID']
  target_project_id = ENV['GITLAB_TARGET_PROJECT_ID']
  review_user_id = ENV['GITLAB_USER_ID']
  issue_id = create_merge_request(
    api_token: ENV['GITLAB_PRIVATE_KEY'],
    source_project: "#{source_project_id}",
    target_project: "#{target_project_id}",
    title: "Release/#{version_string}",
    description: changelog_string,
    assignee: "#{review_user_id}",
    path_with_namespace: ENV['GITLAB_TARGET_PROJECT_PATH_WITH_NAMESPACE'],
    api_url: 'http://gitlab.wilddog.cn'
  )
  
  # 4. Accept merge request
  project_id = ENV['GITLAB_TARGET_PROJECT_ID']
  accept_merge_request(
    api_token: ENV['GITLAB_PRIVATE_KEY'],
    project_id: "#{project_id}",
    issue_id: "#{issue_id}",
    api_url: 'http://gitlab.wilddog.cn'
  )
  
  # 5. Pull origin master
  Actions.sh('git checkout master')
  sh('git pull origin master')
  
  # 6. Add tags and push to origin / myfork
  add_git_tag(tag: version_string)
  push_git_tags(remote: 'origin')
  push_to_git_remote(local_branch: 'master', remote_branch: 'master', remote: 'myfork')
  
  # 7. Source integration repo push
  if ENV['RELEASE_ACTION_LOCAL_REPO_PUSH_ENABLE'] == 'true'
    Dir.chdir '..' do
      Actions.sh("pod repo push wilddog-specs #{release_project_name}.podspec --allow-warnings --sources=git@gitlab.wilddog.cn:ios/Specs.git --verbose")
    end
  end
end


lane :postprocess do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']

  # 1. Update official website: Message digest and changlog
  wdg_update_official_website(
    version: version_string,
    project: release_project_name,
    website_appid: ENV['OFFICIAL_WEBSITE_APP_ID'],
    website_email: ENV['OFFICIAL_WEBSITE_EMAIL'],
    website_password: ENV['OFFICIAL_WEBSITE_PASSWORD'],
    website_project_name: ENV['OFFICIAL_WEBSITE_PROJECT_NAME'],
    print_rather_than_invoke: false
  )

end






###############################################
# For testing
###############################################

lane :pwd do
  sh("pwd")
  Dir.chdir '../Deploy' do
    sh("pwd")
  end
  sh("pwd")
end
