fastlane_require 'yaml'
fastlane_require 'mustache'
fastlane_require 'mail'
fastlane_require 'excon'

# Do not automatically generate README.md file.
skip_docs

before_all do

end


after_all do |lane|

end


error do |lane, exception|
  notification(title: ENV['WDG_PROJECT_NAME'], message: '操作失败')
end


lane :release do |options|
  fastlane_version '2.10.0'
  default_platform :ios
  version_string = options[:version]
  env_file = options[:env]
  raise 'The version is missing. Use `fastlane release version:{version_number}`.' if version_string.nil? || version_string.empty?
  raise 'The version is missing. Use `fastlane release version:{env_file}`.' if env_file.nil? || env_file.empty?
  raise 'The Project name is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['WDG_PROJECT_NAME'].nil? || ENV['WDG_PROJECT_NAME'].empty?
  raise 'The GitLab private key is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_PRIVATE_KEY'].nil? || ENV['GITLAB_PRIVATE_KEY'].empty?
  raise 'The GitLab user id is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_USER_ID'].nil? || ENV['GITLAB_USER_ID'].empty?
  raise 'The GitLab source project id is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_SOURCE_PROJECT_ID'].nil? || ENV['GITLAB_SOURCE_PROJECT_ID'].empty?
  raise 'The GitLab target project id is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_TARGET_PROJECT_ID'].nil? || ENV['GITLAB_TARGET_PROJECT_ID'].empty?
  raise 'The GitLab target project path with namespace is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['GITLAB_TARGET_PROJECT_PATH_WITH_NAMESPACE'].nil? || ENV['GITLAB_TARGET_PROJECT_PATH_WITH_NAMESPACE'].empty?
  raise 'The Email username is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['EMAIL_USERNAME'].nil? || ENV['EMAIL_USERNAME'].empty?
  raise 'The Email password is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['EMAIL_PASSWORD'].nil? || ENV['EMAIL_PASSWORD'].empty?
  raise 'The Email addresses to notify are missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['EMAIL_NOTIFICATION_ADDRESS'].nil? || ENV['EMAIL_NOTIFICATION_ADDRESS'].empty?
  raise 'The Official Website appID is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_APP_ID'].nil? || ENV['OFFICIAL_WEBSITE_APP_ID'].empty?
  raise 'The Official Website Email is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_EMAIL'].nil? || ENV['OFFICIAL_WEBSITE_EMAIL'].empty?
  raise 'The Official Website Password is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_PASSWORD'].nil? || ENV['OFFICIAL_WEBSITE_PASSWORD'].empty?
  raise 'The Official Website Project Name is missing. Write it in `.env.yourname` file then specific `--env yourname` in fastlane to use it.' if ENV['OFFICIAL_WEBSITE_PROJECT_NAME'].nil? || ENV['OFFICIAL_WEBSITE_PROJECT_NAME'].empty?
  # 1. Preprocess
  sh("fastlane preprocess --env #{env_file}")
  # 2. Increase Version
  sh("fastlane version version:#{version_string} --env #{env_file}")
  # 3. Build and Archive
  sh("fastlane build version:#{version_string} --env #{env_file}")
  # 4. CDN and CocoaPods
  sh("fastlane upload version:#{version_string} --env #{env_file}")
  # 5. Update Gitlab
  sh("fastlane gitlab version:#{version_string} --env #{env_file}")
  # 6. Postprocess
  sh("fastlane postprocess version:#{version_string} --env #{env_file}")
end


lane :preprocess do
  # 1. Cocoapods (pod install)
  cocoapods
  # 2. Ensure git brance master
  ensure_git_branch(branch: 'master')
  # 3. Ensute git status clean
  ensure_git_status_clean
  # 4. Get current changelog
  changelog = wdg_get_current_changelog(yaml_path: ENV['CHANGELOG_PATH'])
  raise 'Public changelog must has at least one record'.red if changelog['public'].empty?
end


lane :version do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']
  # 1. increment version number
  increment_version_number(version_number: version_string)
  # 2. Generate version header
  version_header_template_path = "#{release_project_name}/#{release_project_name}Version.h.mustache"
  version_header_path = "#{release_project_name}/#{release_project_name}Version.h"
  if ENV['RELEASE_ACTION_GENERATE_VERSION_HEADER_ENABLE'] == 'true'
    Dir.chdir '..' do
      open(version_header_path, 'w') do |version_header_content|
        template = open(version_header_template_path, 'r')
        version_header_content << Mustache.render(
          template.read,
          version: version_string
        )
      end
    end
  end
  # 3. Forward changelog
  new_release_changelog = {
    'version' => version_string,
    'type' => 'Release',
    'date' => Time.now.strftime('%Y-%m-%d')
  }
  new_changelog = mc_forward_changelog(yaml_path: ENV['CHANGELOG_PATH'], changelog_body: new_release_changelog)
  Dir.chdir '..' do
    File.write(ENV['CHANGELOG_PATH'], new_changelog.to_yaml)
  end
end


lane :build do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']
  # 1. Run test
  if ENV['RELEASE_ACTION_TESTING_ENABLE'] == 'true'
    scan(scheme: release_project_name, devices: ['iPhone 5', 'iPhone 7'])
  end
  # 2. Build project
  Dir.chdir '..' do
    Actions.sh("pushd Deploy && ./build#{release_project_name}.sh #{version_string} && popd")
  end
  # 3. Write local podspec
  local_podspec_path = "#{release_project_name}.podspec"
  if ENV['RELEASE_ACTION_LOCAL_REPO_PUSH_ENABLE'] == 'true'
    Dir.chdir '..' do
      open(local_podspec_path, 'w') do |podspec|
        template = open("#{release_project_name}.podspec.mustache", 'r')
        podspec << Mustache.render(
          template.read,
          version: version_string
        )
      end
    end
  end
  # 4. Write public podspec
  podspec_path = "Deploy/#{release_project_name}.podspec"
  build_file_path = "Deploy/Build/#{release_project_name}-#{version_string}.zip"
  build_file_sha256 = Digest::SHA256.file('../' + build_file_path).hexdigest
  Dir.chdir '..' do
    open(podspec_path, 'w') do |podspec|
      template = open("Deploy/#{release_project_name}.podspec.mustache", 'r')
      podspec << Mustache.render(
        template.read,
        version: version_string,
        sha256: build_file_sha256
      )
    end
  end
  # 5. Archive SDK and podspec
  the_file_name = "#{release_project_name}-#{version_string}.zip"
  path_to_build_file = "Deploy/Build/#{the_file_name}"
  path_to_archive_directory = "Deploy/Archive/#{version_string}/"
  local_podspec_path = "#{release_project_name}.podspec"
  Dir.chdir '..' do
    Actions.sh("mkdir -p #{path_to_archive_directory} && cp #{path_to_build_file} #{path_to_archive_directory}")
  end
  Dir.chdir '..' do
    Actions.sh("mkdir -p #{path_to_archive_directory} && cp #{podspec_path} #{path_to_archive_directory}")
  end
end


lane :upload do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']
  the_file_name = "#{release_project_name}-#{version_string}.zip"
  # 1. Pod lib lint
  Dir.chdir '..' do
    Actions.sh("pushd Deploy && rm -rf #{release_project_name}.framework && unzip ./Build/#{the_file_name} && pod lib lint #{release_project_name}.podspec --allow-warnings && popd")
  end
  # 2. Upload to CDN
  upload_sdk_to_cdn(version:version_string, file_path:build_file_path)
  # 3. pod trunk push
  def work(release_project_name)
    Dir.chdir '..' do
      Actions.sh("pushd Deploy && pod trunk push #{release_project_name}.podspec --allow-warnings --verbose && popd")
    end
  end
  def retry_work(release_project_name, retries=0, delay=30, max_retry_count=10)
    puts "Waiting for #{ delay } seconds."
    sleep delay
    puts "Try #{ retries } time(s)."
    work(release_project_name)
  rescue => ex
    puts ex
    if retries < max_retry_count
      retry_work(release_project_name, retries + 1)
    else
      raise ex
    end
  end
  retry_work(release_project_name)
end


lane :gitlab do |options|
  version_string = options[:version]
  # 1. Git commit (Release candidate)
  git_commit(path: '.', message: "Fastlane: #{version_string} Release Candidate.")
  # 2. Push to myfork master
  push_to_git_remote(local_branch: 'master', remote_branch: 'master', remote: 'myfork')
  # 3. Create merge request
  changelog_string = mc_get_changelog_string(yaml_path: ENV['CHANGELOG_PATH'])
  source_project_id = ENV['GITLAB_SOURCE_PROJECT_ID']
  target_project_id = ENV['GITLAB_TARGET_PROJECT_ID']
  review_user_id = ENV['GITLAB_USER_ID']
  issue_id = create_merge_request(
    api_token: ENV['GITLAB_PRIVATE_KEY'],
    source_project: "#{source_project_id}",
    target_project: "#{target_project_id}",
    title: "Release/#{version_string}",
    description: changelog_string,
    assignee: "#{review_user_id}",
    path_with_namespace: ENV['GITLAB_TARGET_PROJECT_PATH_WITH_NAMESPACE'],
    api_url: 'http://gitlab.wilddog.cn'
  )
  # 4. Accept merge request
  project_id = ENV['GITLAB_TARGET_PROJECT_ID']
  accept_merge_request(
    api_token: ENV['GITLAB_PRIVATE_KEY'],
    project_id: "#{project_id}",
    issue_id: "#{issue_id}",
    api_url: 'http://gitlab.wilddog.cn'
  )
  # 5. Pull origin master
  Actions.sh('git checkout master')
  Actions.sh('git pull origin master')
  # 6. Add tags and push to origin / myfork
  add_git_tag(tag: version_string)
  push_git_tags(remote: 'origin')
  # Push to myfork

  # Source integration repo push
  if ENV['RELEASE_ACTION_LOCAL_REPO_PUSH_ENABLE'] == 'true'
    Dir.chdir '..' do
      Actions.sh("pod repo push wilddog-specs #{release_project_name}.podspec --allow-warnings --sources=git@gitlab.wilddog.cn:ios/Specs.git --verbose")
    end
  end
end


lane :postprocess do |options|
  version_string = options[:version]
  release_project_name = ENV['WDG_PROJECT_NAME']
  # 1. Calculate and update message degest
  official_website_app_id = ENV['OFFICIAL_WEBSITE_APP_ID']
  official_website_email = ENV['OFFICIAL_WEBSITE_EMAIL']
  official_website_password = ENV['OFFICIAL_WEBSITE_PASSWORD']
  official_website_project_name = ENV['OFFICIAL_WEBSITE_PROJECT_NAME']
  cdn_download_url = "https://cdn.wilddog.com/sdk/ios/#{version_string}/#{release_project_name}-#{version_string}.zip"
  build_file_path = "Deploy/Build/#{release_project_name}-#{version_string}.zip"
  build_file_sha256 = Digest::SHA256.file('../' + build_file_path).hexdigest
  build_file_md5 = Digest::MD5.file('../' + build_file_path).hexdigest
  build_file_sha1 = Digest::SHA1.file('../' + build_file_path).hexdigest
  if ENV['RELEASE_ACTION_OFFICIAL_WEBSITE_DOWNLOAD_URL_UPDATE_ENABLE'] == 'true'
    Actions.sh("wilddog set #{official_website_app_id} wilddog/#{official_website_project_name}/ios/version #{version_string} --email #{official_website_email} --password #{official_website_password}")
    Actions.sh("wilddog set #{official_website_app_id} wilddog/#{official_website_project_name}/ios/cdn #{cdn_download_url} --email #{official_website_email} --password #{official_website_password}")
    Actions.sh("wilddog set #{official_website_app_id} wilddog/#{official_website_project_name}/ios/checksum/md5sum #{build_file_md5} --email #{official_website_email} --password #{official_website_password}")
    Actions.sh("wilddog set #{official_website_app_id} wilddog/#{official_website_project_name}/ios/checksum/sha1sum #{build_file_sha1} --email #{official_website_email} --password #{official_website_password}")
    Actions.sh("wilddog set #{official_website_app_id} wilddog/#{official_website_project_name}/ios/checksum/sha256sum #{build_file_sha256} --email #{official_website_email} --password #{official_website_password}")
  end
  # 2. Update official website changlog
  if ENV['RELEASE_ACTION_OFFICIAL_WEBSITE_CHANGELOG_UPDATE_ENABLE'] == 'true'
    Actions.sh("wilddog set #{official_website_app_id} changes/iOS/version #{version_string} --email #{official_website_email} --password #{official_website_password}")
    # TODO: Finish this.
    # Actions.sh("wilddog set #{official_website_app_id} changes/iOS/change #{} --email #{official_website_email} --password #{official_website_password}")
  end
  # 3. Send email
  # FIXME: Changelog is already modified.
  public_changelog = wdg_get_current_changelog(yaml_path: ENV['CHANGELOG_PATH'])['public']
  if ENV['RELEASE_ACTION_NOTIFICATION_EMAIL_ENABLE'] == 'true'
    Mail.defaults do
      delivery_method :smtp, {
        :address              => 'smtp.partner.outlook.cn',
        :port                 => 587,
        :domain               => 'wilddog.com',
        :user_name            => ENV['EMAIL_USERNAME'],
        :password             => ENV['EMAIL_PASSWORD'],
        :authentication       => :login,
        :enable_starttls_auto => true
      }
    end
    template_changelog = {}
    template_changelog['add'] = public_changelog['新增'].map { |entity| { 'content' => entity } } unless public_changelog['新增'].nil?
    template_changelog['improve'] = public_changelog['改进'].map { |entity| { 'content' => entity } } unless public_changelog['改进'].nil?
    template_changelog['repair'] = public_changelog['修复'].map { |entity| { 'content' => entity } } unless public_changelog['修复'].nil?
    template_changelog['remove'] = public_changelog['移除'].map { |entity| { 'content' => entity } } unless public_changelog['移除'].nil?
    notification_mail_template_path = "fastlane/notification.html.mustache"
    template = open('../' + notification_mail_template_path, 'r')
    notification_mail_content = Mustache.render(
      template.read,
      release_project_name: release_project_name,
      version_string: version_string,
      changelog: template_changelog
    )
    sending_email_to_users = ENV['EMAIL_NOTIFICATION_ADDRESS'].split(' ')
    UI.message("Sending email to #{sending_email_to_users}.")
    Mail.deliver do
      from    ENV['EMAIL_USERNAME']
      to      sending_email_to_users
      subject "#{release_project_name} iOS #{version_string} 上线通知"
      html_part do
        content_type 'text/html; charset=UTF-8'
        body         notification_mail_content
      end
    end
  end
end


lane :testaction do
  wdg_forward_changelog(version_string: '9.9.9', changelog_path: ENV['CHANGELOG_PATH'])
end

lane :pwd do
  sh("pwd")
  Dir.chdir '../Deploy' do
    sh("pwd")
  end
  sh("pwd")
end

lane :changelog do
  changelog = wdg_get_current_changelog(yaml_path: ENV['CHANGELOG_PATH'])
  changelog_string = mc_get_changelog_string(yaml_path: ENV['CHANGELOG_PATH'])
  puts changelog
  puts changelog_string
end

lane :header do
  wdg_forward_version_header(project_name: "WilddogMock", version_string: "1.1.1")
end